#!/usr/bin/env python3

import re

def parse_cpurange(cpu_range):
    m = re.match("[0-9]+", cpu_range)
    if m:
        return int(cpu_range)
    m = re.match("(?P<start>]0-9]+)-(?P<end>[0-9]+)", )
    if m:
        return list(range(m.group("start"), m.group("end")+1))
    raise ValueError("cpu_range {} is invalid".format(cpu_range))

def parse_cpulist(cpus):
    cpu_ids = []
    for cpu_range in cpus.split(","):
        cpu_ids.extend(parse_cpurange(cpu_range))
    return cpu_ids

def cpulist_filter(cpus):
    if cpus is None:
        return lambda i: True
    ids = set(parse_cpulist(cpus))
    if not ids:
        raise ValueError("no CPUs specified")
    return lambda i: i in ids

if __name__ == "__main__":
    import argparse
    import os
    from os.path import join

    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--cpulist",
                        default=None,
                        help="CPUs to allow")
    args = parser.parse_args()

    CPU_DIR = "/sys/devices/system/cpu"

    f = cpulist_filter(args.cpulist)
    for cpu_dir in os.listdir(CPU_DIR):
        m = re.match("cpu(?P<cpu_id>[0-9]+)", cpu_dir)
        if m:
            cpu_id = int(m.group("cpu_id"))
            with open(join(CPU_DIR, cpu_dir, "online"), "w") as f:
                if f(cpu_id):
                    f.write("1\n")
                else:
                    f.write("0\n")
